<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>两种方法实现性别预测</title>
    <url>/gender-predict/</url>
    <content><![CDATA[<p>分别使用<code>基于规则的方法</code>和<code>基于统计的方法</code>实现性别预测，数据集及代码见<a href="https://github.com/gaoxingjian/gender-predict">GitHub</a>，本文为《自然语言理解》期末课程设计报告。</p>
<a id="more"></a>
<h2 id="一实验目的内容及分工">一、实验目的、内容及分工</h2>
<h3 id="实验目的">1. 实验目的</h3>
<p>当我们听到一个名字，能够根据经验和对文字的理解能够判别出这个名字属于男性还是女性。可是，对于一个冰冷的机器，它能够根据名字判断性别吗？本实验分别从基于规则的方法和基于统计的方法设计一个程序，给定一个人名，判断性别。</p>
<h3 id="实验内容">2. 实验内容</h3>
<p>本实验分别使用两种方法实现性别预测，下面具体说明实验内容：</p>
<ul>
<li>方法一：基于规则的方法。人名的构成具有一定的规律，基于规则的方法正是在对这些规律的研究的基础上发展起来的，其主要思想就是对人名的构成和上下文的信息进行总结归纳，找出其规律，将这些规律加以总结提取，从而建立规则集。然后根据规则，对提取出的人名进行性别预测。</li>
<li>方法二：基于统计的方法。利用朴素贝叶斯分类，从人名样本库中对人名的各部分用字加以统计，分别得到这些用字作人名对应性别出现的概率，在真实文本中通过对人名用字串计算其概率估值进行性别预测。</li>
</ul>
<h2 id="二实验环境和编程语言">二、实验环境和编程语言</h2>
<h3 id="实验环境">1. 实验环境</h3>
<ul>
<li>Windows 10 1903</li>
<li>Visual Studio Code</li>
</ul>
<h3 id="编程语言">2. 编程语言</h3>
<ul>
<li>Python 3.7.4</li>
</ul>
<h2 id="三实验过程">三、实验过程</h2>
<h3 id="问题分析">1. 问题分析</h3>
<ul>
<li>方法一： 基于规则的方法。该方法主要是从一篇文章中判断出人名的性别，根据人名上下文“他”、“她”、“它”出现次数及人名在文章中出现的次数计算概率。概率最大的，就是对应的性别。</li>
<li>方法二：基于统计的方法。将问题看成二分类问题，一类是男性，一类是女性。使用朴素贝叶斯分类，设置一个训练集，其中有男性名字和女性名字，分别计算出所有女生（男生）的名字中，某字出现的频率，若预测集中出现训练集中未出现的汉字，则需要对频率进行Laplace平滑。最后对预测集中的姓名进行预测，对比实际数据，得出准确率。</li>
</ul>
<h3 id="算法设计">2. 算法设计</h3>
<ul>
<li><p>方法一：基于规则的方法。</p>
<ul>
<li><span class="math inline">\(X_i\)</span>：人称代词：他、她、它。</li>
<li><span class="math inline">\(A_i\)</span>：包含name的段落中<span class="math inline">\(X_i\)</span>的个数</li>
<li><span class="math inline">\(B_i\)</span>：包含<span class="math inline">\(X_i\)</span>的段落的个数</li>
<li><span class="math inline">\(M\)</span>：包含name的段落的个数</li>
<li><span class="math inline">\(N\)</span>：段落总数</li>
</ul>
<p><span class="math display">\[
P(X_i)=\frac{A_i/M}{B_i/N}
\]</span></p>
<p><span class="math inline">\(P(X_i)\)</span>最大的，就是对应的性别。</p></li>
<li><p>方法二：基于统计的方法。朴素贝叶斯算法是一种具有一定的发现规律能力的数据挖掘算法，并且具有分类能力，其基本假设是所有特征是相互独立的，将这种特点应用到性别预测中可以取得良好的效果。具体的，从人名识别的角度来说，一个人名只存在两种可能:“男”和“女”，这样贝叶斯算法就从概率的角度对一个人名是男是女进行了阐明。对于一个分类问题，如果我们只需要得到其标签，我们只需要求解： <span class="math display">\[
y_{pred}=\arg \max_{y}P(Y=y)\prod_{i=1}^{n}{P(X_i|Y=y)}
\]</span></p>
<ol type="1">
<li><p>计算每个汉字的男女频率。</p></li>
<li><p>考虑到预测集中可能会有汉字并没有出现在训练集中，所以我们需要对频率进行Laplace平滑。</p></li>
<li><p>在性别预测中，每个样本中大量的特征都是<span class="math inline">\(0\)</span>。比如说只有<span class="math inline">\(X_2=1\)</span>，其他都为<span class="math inline">\(0\)</span>，那么 <span class="math display">\[
y_{pred}=\arg\max_yP(Y=y)P(X_2=1|Y=y)\frac{\prod_{i=1}^nP(X_i=0|Y=y)}{P(X_2=0|Y=y)}
\]</span></p></li>
</ol></li>
</ul>
<p>由于<span class="math inline">\(P(X_i)\)</span>的数值通常较小，我们对整体取对数（防止浮点误差），可得 <span class="math display">\[
\log P(Y=y)+\sum_{i=1}^n\log P(X_i=0|Y=y)+\log P(X_2=1|Y=y)-\log P(X_2=0|Y=y)
\]</span> 对于一种性别，<span class="math inline">\(\log P(Y=y)+\sum_{i=1}^n\log P(X_i=0|Y=y)\)</span>只需要计算一次。为了方面，我们将其数值存放在bases当中。</p>
<h3 id="编码">3. 编码</h3>
<ul>
<li><p>方法一： 基于规则的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gender_detect</span>(<span class="params">term, content_lines</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    brief: 基于概率的性别检测算法，</span></span><br><span class="line"><span class="string">    params: term 小说术语，保证是一个人名</span></span><br><span class="line"><span class="string">    params: content_lines 按行分割好的小说文本</span></span><br><span class="line"><span class="string">    retrun: genre (male, famale, neutral)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    lines = content_lines</span><br><span class="line">    sls = []</span><br><span class="line">    keyword = term</span><br><span class="line">    hecount = <span class="number">0</span></span><br><span class="line">    shecount = <span class="number">0</span></span><br><span class="line">    itcount = <span class="number">0</span></span><br><span class="line">    sums = <span class="number">0</span></span><br><span class="line">    sumcount = <span class="number">0</span></span><br><span class="line">    andhecount = <span class="number">0</span></span><br><span class="line">    andshecount = <span class="number">0</span></span><br><span class="line">    anditcount = <span class="number">0</span></span><br><span class="line">    sums = <span class="built_in">len</span>(lines)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> line.find(<span class="string">&quot;他&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">            hecount = hecount + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> line.find(<span class="string">&quot;她&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">            shecount = shecount + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> line.find(<span class="string">&quot;它&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">            itcount = itcount + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> line.find(keyword) != -<span class="number">1</span>:</span><br><span class="line">            sls.append(line)</span><br><span class="line">            sumcount = sumcount + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> line.find(<span class="string">&quot;他&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">                andhecount = andhecount + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> line.find(<span class="string">&quot;她&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">                andshecount = andshecount + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> line.find(<span class="string">&quot;它&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">                anditcount = anditcount + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> sumcount == <span class="number">0</span> <span class="keyword">or</span> sums == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;neutral&#x27;</span></span><br><span class="line">    heandr = (andhecount/sumcount)/(hecount/sums)</span><br><span class="line">    sheandr = (andshecount/sumcount)/(shecount/sums)</span><br><span class="line">    itandr = (anditcount/sumcount)/(itcount/sums)</span><br><span class="line">    <span class="comment"># print(&quot;他\t她\t它\n&quot;)</span></span><br><span class="line">    candis = [<span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;neutral&#x27;</span>]</span><br><span class="line">    arr = [heandr, sheandr, itandr]</span><br><span class="line">    <span class="comment"># print(arr)</span></span><br><span class="line">    <span class="keyword">return</span> candis[arr.index(<span class="built_in">max</span>(arr))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_novel_lines</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    novel_path = <span class="string">&#x27;data/qing_yu_nian.txt&#x27;</span></span><br><span class="line">    names = [</span><br><span class="line">        <span class="string">&#x27;五竹&#x27;</span>, <span class="string">&#x27;李治&#x27;</span>, <span class="string">&#x27;李云睿&#x27;</span>, <span class="string">&#x27;林若甫&#x27;</span>, <span class="string">&#x27;范若若&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;范思辙&#x27;</span>, <span class="string">&#x27;费介&#x27;</span>, <span class="string">&#x27;林婉儿&#x27;</span>, <span class="string">&#x27;柳思思&#x27;</span>, <span class="string">&#x27;海棠朵朵&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;司理理&#x27;</span>, <span class="string">&#x27;战豆豆&#x27;</span>, <span class="string">&#x27;范淑宁&#x27;</span>, <span class="string">&#x27;红豆饭&#x27;</span>, <span class="string">&#x27;王启年&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;四顾剑&#x27;</span>, <span class="string">&#x27;苦荷&#x27;</span>, <span class="string">&#x27;叶流云&#x27;</span>, <span class="string">&#x27;洪四庠&#x27;</span>, <span class="string">&#x27;影子&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;云之澜&#x27;</span>, <span class="string">&#x27;叶重&#x27;</span>, <span class="string">&#x27;叶完&#x27;</span>, <span class="string">&#x27;燕小乙&#x27;</span>, <span class="string">&#x27;太后&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;宁才人&#x27;</span>, <span class="string">&#x27;李承乾&#x27;</span>, <span class="string">&#x27;太子&#x27;</span>, <span class="string">&#x27;大皇子&#x27;</span>, <span class="string">&#x27;北齐大公主&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;和亲王&#x27;</span>, <span class="string">&#x27;和亲王妃&#x27;</span>, <span class="string">&#x27;王瞳儿&#x27;</span>, <span class="string">&#x27;玛索索&#x27;</span>, <span class="string">&#x27;淑贵妃&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;李承泽&#x27;</span>, <span class="string">&#x27;叶灵儿&#x27;</span>, <span class="string">&#x27;皇后&#x27;</span>, <span class="string">&#x27;李弘成&#x27;</span>, <span class="string">&#x27;郭攸之&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;郭保坤&#x27;</span>, <span class="string">&#x27;郭铮&#x27;</span>, <span class="string">&#x27;贺宗纬&#x27;</span>, <span class="string">&#x27;朱格&#x27;</span>, <span class="string">&#x27;言冰云&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    novel_lines = read_novel_lines(novel_path)</span><br><span class="line">    gender_list = [gender_detect(name.strip(), novel_lines) <span class="keyword">for</span> name <span class="keyword">in</span> names]</span><br><span class="line">    print(<span class="built_in">dict</span>(<span class="built_in">zip</span>(names, gender_list)))</span><br></pre></td></tr></table></figure></li>
<li><p>方法二：基于统计的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span>():</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&#x27;data/data_set.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = data.dropna()</span><br><span class="line"></span><br><span class="line">    data.loc[data[<span class="string">&#x27;gender&#x27;</span>] == <span class="number">2</span>, <span class="string">&#x27;gender&#x27;</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 划分训练集和测试集</span></span><br><span class="line">    train = data.sample(frac=<span class="number">0.95</span>, random_state=<span class="literal">None</span>, axis=<span class="number">0</span>)</span><br><span class="line">    test = data[~data.index.isin(train.index)]</span><br><span class="line"></span><br><span class="line">    names_female = train[train[<span class="string">&#x27;gender&#x27;</span>] == <span class="number">0</span>]</span><br><span class="line">    names_male = train[train[<span class="string">&#x27;gender&#x27;</span>] == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    totals = &#123;</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="built_in">len</span>(names_female),</span><br><span class="line">        <span class="string">&#x27;m&#x27;</span>: <span class="built_in">len</span>(names_male)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> names_female, names_male, totals,train,test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算频率</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_frequency</span>(<span class="params">names_female, names_male, totals</span>):</span></span><br><span class="line">    <span class="comment"># 计算在所有女生的名字当中，某个字出现的频率，相当于是计算 P(Xi|女生)</span></span><br><span class="line">    frequency_list_f = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names_female[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> name:</span><br><span class="line">            frequency_list_f[char] += <span class="number">1.</span> / totals[<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算在所有男生的名字当中，某个字出现的频率，相当于是计算P(Xi|男生)</span></span><br><span class="line">    frequency_list_m = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names_male[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> name:</span><br><span class="line">            frequency_list_m[char] += <span class="number">1.</span> / totals[<span class="string">&#x27;m&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> frequency_list_f, frequency_list_m</span><br><span class="line"></span><br><span class="line"><span class="comment"># Laplace平滑</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">laplace_smooth</span>(<span class="params">char, frequency_list, total, alpha=<span class="number">1.0</span></span>):</span></span><br><span class="line">    count = frequency_list[char] * total</span><br><span class="line">    distinct_chars = <span class="built_in">len</span>(frequency_list)</span><br><span class="line">    freq_smooth = (count + alpha) / (total + distinct_chars * alpha)</span><br><span class="line">    <span class="keyword">return</span> freq_smooth</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base</span>(<span class="params">frequency_list_f,frequency_list_m,train</span>):</span></span><br><span class="line">    base_f = math.log(<span class="number">1</span> - train[<span class="string">&#x27;gender&#x27;</span>].mean())</span><br><span class="line">    base_f += <span class="built_in">sum</span>([math.log(<span class="number">1</span> - frequency_list_f[char]) <span class="keyword">for</span> char <span class="keyword">in</span> frequency_list_f])</span><br><span class="line"></span><br><span class="line">    base_m = math.log(train[<span class="string">&#x27;gender&#x27;</span>].mean())</span><br><span class="line">    base_m += <span class="built_in">sum</span>([math.log(<span class="number">1</span> - frequency_list_m[char]) <span class="keyword">for</span> char <span class="keyword">in</span> frequency_list_m])</span><br><span class="line"></span><br><span class="line">    bases = &#123;<span class="string">&#x27;f&#x27;</span>: base_f, <span class="string">&#x27;m&#x27;</span>: base_m&#125;</span><br><span class="line">    <span class="keyword">return</span> bases</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_log_prob</span>(<span class="params">char, frequency_list, total</span>):</span></span><br><span class="line">    freq_smooth = laplace_smooth(char, frequency_list, total)</span><br><span class="line">    <span class="keyword">return</span> math.log(freq_smooth) - math.log(<span class="number">1</span> - freq_smooth)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_log_prob</span>(<span class="params">name, bases, totals, frequency_list_m, frequency_list_f</span>):</span></span><br><span class="line">    logprob_m = bases[<span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">    logprob_f = bases[<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> name:</span><br><span class="line">        logprob_m += get_log_prob(char, frequency_list_m, totals[<span class="string">&#x27;m&#x27;</span>])</span><br><span class="line">        logprob_f += get_log_prob(char, frequency_list_f, totals[<span class="string">&#x27;f&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;male&#x27;</span>: logprob_m, <span class="string">&#x27;female&#x27;</span>: logprob_f&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gender</span>(<span class="params">log_probs</span>):</span></span><br><span class="line">    <span class="keyword">return</span> log_probs[<span class="string">&#x27;male&#x27;</span>] &gt; log_probs[<span class="string">&#x27;female&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span>(<span class="params">bases, totals, frequency_list_m, frequency_list_f,test</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> test[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">        log_probs = compute_log_prob(name, bases, totals, frequency_list_m, frequency_list_f)</span><br><span class="line">        gender = get_gender(log_probs)</span><br><span class="line">        result.append(<span class="built_in">int</span>(gender))</span><br><span class="line">    test[<span class="string">&#x27;predict&#x27;</span>] = result</span><br><span class="line">    print(test.tail(<span class="number">20</span>))</span><br><span class="line">    print(<span class="string">f&quot;Accuracy: <span class="subst">&#123;accuracy_score(test[<span class="string">&#x27;gender&#x27;</span>],test[<span class="string">&#x27;predict&#x27;</span>])*<span class="number">1.</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    names_female,names_male,totals,train,test = load_data()</span><br><span class="line">    frequency_list_f, frequency_list_m = cal_frequency(names_female,names_male,totals)</span><br><span class="line">    bases = get_base(frequency_list_f,frequency_list_m,train)</span><br><span class="line">    result = get_result(bases, totals, frequency_list_m, frequency_list_f,test)</span><br><span class="line">    result.to_csv(<span class="string">&#x27;data/result.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="测试">4. 测试</h3>
<ul>
<li><p>方法一： 基于规则的方法。选用了《庆余年》小说中<span class="math inline">\(45\)</span>个人物姓名，根据整篇小说的内容对这<span class="math inline">\(45\)</span>个人物性别进行了预测，测试结果如下：</p>
<ul>
<li><p>结果说明</p>
<table>
<thead>
<tr class="header">
<th>变量</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>male</td>
<td>男性</td>
</tr>
<tr class="even">
<td>female</td>
<td>女性</td>
</tr>
<tr class="odd">
<td>neutral</td>
<td>中性或无法判别</td>
</tr>
</tbody>
</table></li>
<li><p>测试结果</p></li>
</ul></li>
</ul>
<figure>
<img data-src="/gender-predict/rule_result.png" alt="方法一测试结果" /><figcaption aria-hidden="true">方法一测试结果</figcaption>
</figure>
<ul>
<li><p>方法二：基于统计的方法。数据集来自网络爬虫，共有<span class="math inline">\(120000\)</span>条样本，将数据集进行划分，<span class="math inline">\(95\%\)</span>为训练集，剩下<span class="math inline">\(5\%\)</span>为测试集。</p>
<ul>
<li><p>样本说明</p>
<table>
<thead>
<tr class="header">
<th>变量</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>id</td>
<td>编号</td>
</tr>
<tr class="even">
<td>name</td>
<td>名字</td>
</tr>
<tr class="odd">
<td>gender</td>
<td>性别。0表示女生，1表示男生。</td>
</tr>
</tbody>
</table></li>
<li><p>评价方法</p>
<p>评价方法为准确率（<span class="math inline">\(Accuracy\)</span>）。准确率的取值范围是<span class="math inline">\(0\)</span>到<span class="math inline">\(1\)</span>，越接近<span class="math inline">\(1\)</span>，说明模型预测的结果越接近真实结果。</p></li>
<li><p>测试结果</p></li>
</ul>
<p>因数据量较大，这里仅展示测试集后<span class="math inline">\(20\)</span>个人名预测结果，测试集总体预测准确率为<span class="math inline">\(83.06\%\)</span>。</p></li>
</ul>
<figure>
<img data-src="/gender-predict/statistics_result.png" alt="方法二测试结果" /><figcaption aria-hidden="true">方法二测试结果</figcaption>
</figure>
<h2 id="四实验结果分析">四、实验结果分析</h2>
<p>基于规则的方法进行性别预测具有简洁，概括能力强等优点，在本实验中无需语料库，可以适用于海量的文章中人物性别预测。但准确度有时不如基于统计的方法。</p>
<p>基于统计的方法进行性别预测具有简洁，直观，不需要考虑句法、语义上的信息，不需要分词等优点。然而，大规模语料进行大量计算，若不降低算法复杂度，在计算能力有限的情况下，需要较长的时间才能得到最终结果。</p>
<h2 id="五心得体会">五、心得体会</h2>
<p>在使用基于规则的方法中，使用到了一些规则方法，如根据人名上下文`“他”、“她”、“它”出现次数计算概率。</p>
<p>在基于统计的方法预测性别的过程中，更加理解了朴素贝叶斯分类算法，虽然本次实验数据量较小，但是也在预测集中取得了较高的准确率。若扩大语料库，优化算法，提升模型学习能力，应该能够得到更高的准确率。</p>
<p>本次实验比较了基于规则的方法和基于统计的方法进行性别预测，发现两种方法各有优缺点。在阅读了大量文献后，认为使用规则和统计相结合的方法应该能取得更好的效果。</p>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>瀑布模型与敏捷开发</title>
    <url>/agile-development/</url>
    <content><![CDATA[<p>瀑布模型在以前人们用的最多，它本质上分为几个步骤，例如我们第一步是研究可行性，第二步是需求分析，第三步是软件设计，第四步是软件编码，第五步是软件测试，第六步是软件部署；敏捷开发是近些年兴起的一种软件开发与管理的思想，以其灵活性、易操作性得到软件行业的广泛关注；瀑布模型与敏捷开发有着本质区别。</p>
<a id="more"></a>
<h2 id="瀑布模型">瀑布模型</h2>
<p>在执行瀑布模型的时候，我们必须一步一步的做，也就是说必须先完成软件需求分析才可以进行软件设计，而且在进行一步的时候不能回滚到上一步，并且必须尊重上一步的工作结果。也就是说在你需求分析完了以后，我们就必须要开始设计，而且设计过程中不能更改需求，设计进行完了以后必须要进行软件实现，在软件编码不成功，不能更改软件设计。然而，一旦不得不更改的时候，就需要回滚整个瀑布模型。如果一个产品经理一旦更改需求，就意味前功尽弃。</p>
<p><strong>瀑布模型比较固化死板，但是通过瀑布模型构造的软件bug非常少，因为他在发布前已经进行了充分的测试修正，它的所有已知的问题解决才会完成发布。</strong></p>
<p>直到今天，很多应用于企业的软件项目都使用瀑布模型开发，微软的Windows xp就是通过瀑布模型构造的，我们知道xp发布了以后这么多年，好像没有加什么新的功能，它的功能都是之前需求分析出来的的结果。因为如果微软要加新功能的话，就要重新去需求分析，重新编码。于是，在几年后微软又接着发布了Windows Vista、Windows 7。在发布下一个版本的软件的时候，他们往往会参考上一个版本的一些结果，但是并不是对上一个版本的修改。他可能沿用了很多老代码，但那是一个新的项目，完整的走了一遍瀑布模型周期的。</p>
<p>然而，在今天新的市场需求可能会在几星期内出现。比如，大家发现某种游戏非常好玩。可能几星期后就会有某些公司抄袭做一款很像的游戏，可能又在几星期后这种游戏突然就没有人玩。在如此频繁的需求变更的情况下，如果使用瀑布模型开发软件就太难跟上市场变化了，瀑布模型最大的缺陷就是难以应对市场变化。</p>
<h2 id="敏捷开发">敏捷开发</h2>
<p>于是，敏捷软件出现了。它就像是一个基础定律。</p>
<p>在敏捷软件开发中，主要分为两组成员，第一组成员并不是每天全身心投入到软件开发中的，他们甚至都不属于团队的一部分，他们每天要做的事就是不仅为软件开发的过程提建议并划分优先级，他们可能是老板，可能是产品经理，也可能是一位用户。第二组成员每天都需要全身心的投入进去，他们要按照第一组成员给他们提出来的bug、任务按照优先级排好，之后优先去处理一些优先级高的任务。敏捷开发模型中有一个固定的周期。这个周期是整个团队在最初协商好的，一般这个周期是俩星期到四个星期。一旦市场需求发生了变更，很快就会有机组成员提出，然后就要加到下一个周期中的任务单。</p>
<p>经常有的软件小bug不断，这是因为市场需求在不断变更，每一个周期里都会有新的任务加任务单，永远不可能把所有的任务都处理完，团队只会优先处理那些优先级高的。处理完了，就是一个发布周期。</p>
<p>就比如现在的Windows 10，很多人反馈说小bug不断。微软是知道的，这些都在他们的任务单里，只不过这些任务可能优先级比较低。比他们团队在优先处理一些更严重的错误。</p>
<p>Windows里内置一个应用，叫做反馈。我们可以在反馈中，给Windows 10提建议或者给别的建议点赞，这个应用在之前的Windows是没有的，并不是微软喜欢倾听了，其实是因为他们采用敏捷开发了。</p>
<p>敏捷是能够满足现在的市场需求，相比瀑布模型那种高风险的投资模型在经济上也非常具有优势。以前我们平常用的几乎所有的互联网软件，手机上的App，平时玩的游戏都是使用敏捷模型开发，我们知道我们在玩游戏的时候可能今天只能玩三维，明天团队就会告诉我们今天只能玩第三视角，后天就会告诉我们也能玩第一视角了。</p>
<p><strong>现在好多项目都在采用敏捷模型。这是因为随着技术的发展，软件开发周期越来越短，竞争对手应对市场需求变得越来越快。每个人都在图快，在每个人都希望能够快速把握市场的情况下，敏捷模型才会突然流行起来。</strong></p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
</search>
