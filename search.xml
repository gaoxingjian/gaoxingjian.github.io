<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>hello</title>
    <url>/hello/</url>
    <content><![CDATA[<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><a id="more"></a>
<p>asdasd😄撒打算的<code>asdasd</code>撒打算 <code>阿斯顿</code> asd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% gp 6-2 %&#125;</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div></div></div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% gp 5-3 %&#125;</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">![](https:&#x2F;&#x2F;cdn1-t17.techbang.com&#x2F;system&#x2F;attached_images&#x2F;2020&#x2F;05&#x2F;277179&#x2F;original&#x2F;39abbaf3f292fcb1f5406ade609e4214.png)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div><div class="group-picture-column"><img data-src="https://cdn1-t17.techbang.com/system/attached_images/2020/05/277179/original/39abbaf3f292fcb1f5406ade609e4214.png"></div></div></div>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span>  <span class="comment">#預設分類</span></span><br><span class="line"><span class="attr">category_map:</span>  <span class="comment">#分類別名，和文章標題類似意思，分為「給人看的」和「給網址看的」</span></span><br><span class="line"><span class="attr">tag_map:</span>  <span class="comment">#標籤別名，分為「給人看的」和「給網址看的」</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [下面這個是範例，設定方式為 &quot;給人看的&quot;: &quot;給網址看的&quot;]</span></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">未分類</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line">  <span class="string">開箱文:</span> <span class="string">unboxing</span></span><br><span class="line">  <span class="string">未分類:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line">  <span class="string">日記:</span> <span class="string">daily</span></span><br><span class="line">  <span class="string">美食:</span> <span class="string">food</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">darkmode_js:</span> <span class="string">https://cdn.jsdelivr.net/npm/darkmode-js/lib/darkmode-js.min.js</span></span><br></pre></td></tr></table></figure>




<p>or<br>_vendors.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">darkmode_js:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">darkmode-js</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.5</span><span class="number">.7</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">lib/darkmode-js.min.js</span></span><br></pre></td></tr></table></figure>

<p>vendors.njk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.canvas_ribbon.enable %&#125;</span><br><span class="line">  &lt;script size&#x3D;&quot;&#123;&#123; theme.canvas_ribbon.size &#125;&#125;&quot; alpha&#x3D;&quot;&#123;&#123; theme.canvas_ribbon.alpha &#125;&#125;&quot; zIndex&#x3D;&quot;&#123;&#123; theme.canvas_ribbon.zIndex &#125;&#125;&quot; src&#x3D;&quot;&#123;&#123; theme.vendors.canvas_ribbon &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%- for name in js_vendors() %&#125;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#123;&#123; url_for(theme.vendors[name]) &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Customize darkmode.js - Declaration #&#125;</span><br><span class="line">&#123;%- if theme.darkmode_js.enable %&#125;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#123;&#123; theme.vendors.darkmode_js &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Customize darkmode.js - Invokation #&#125;</span><br><span class="line">&#123;%- if theme.darkmode_js.enable %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var options &#x3D; &#123;</span><br><span class="line">  bottom: &#39;64px&#39;, &#x2F;&#x2F; default: &#39;32px&#39;</span><br><span class="line">  right: &#39;unset&#39;, &#x2F;&#x2F; default: &#39;32px&#39;</span><br><span class="line">  left: &#39;32px&#39;, &#x2F;&#x2F; default: &#39;unset&#39;</span><br><span class="line">  time: &#39;0.5s&#39;, &#x2F;&#x2F; default: &#39;0.3s&#39;</span><br><span class="line">  mixColor: &#39;#fff&#39;, &#x2F;&#x2F; default: &#39;#fff&#39;</span><br><span class="line">  backgroundColor: &#39;#fff&#39;,  &#x2F;&#x2F; default: &#39;#fff&#39;</span><br><span class="line">  buttonColorDark: &#39;#100f2c&#39;,  &#x2F;&#x2F; default: &#39;#100f2c&#39;</span><br><span class="line">  buttonColorLight: &#39;#fff&#39;, &#x2F;&#x2F; default: &#39;#fff&#39;</span><br><span class="line">  saveInCookies: true, &#x2F;&#x2F; default: true,</span><br><span class="line">  label: &#39;🌓&#39;, &#x2F;&#x2F; default: &#39;&#39;</span><br><span class="line">  autoMatchOsTheme: true &#x2F;&#x2F; default: true</span><br><span class="line">&#125;</span><br><span class="line">const darkmode &#x3D; new Darkmode(options);</span><br><span class="line">darkmode.showWidget();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>ICFG_Reentrancy</title>
    <url>/ICFG-Reentrancy/</url>
    <content><![CDATA[<p>源码</p>
<a id="more"></a>

<h2 id="ICFG-Reentrancy-py"><a href="#ICFG-Reentrancy-py" class="headerlink" title="ICFG_Reentrancy.py"></a>ICFG_Reentrancy.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> slither.detectors.abstract_detector <span class="keyword">import</span> (AbstractDetector, DetectorClassification)</span><br><span class="line"><span class="keyword">from</span> slither.core.cfg.node <span class="keyword">import</span> NodeType</span><br><span class="line"><span class="keyword">from</span> slither.slithir.operations <span class="keyword">import</span> (HighLevelCall, LowLevelCall, LibraryCall, Send, Transfer)</span><br><span class="line"><span class="keyword">from</span> slither.analyses.data_dependency.data_dependency <span class="keyword">import</span> is_tainted</span><br><span class="line"><span class="keyword">from</span> slither.slithir.variables.constant <span class="keyword">import</span> Constant</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> slither.core.callGraph.CallGraph <span class="keyword">import</span> CallGraph</span><br><span class="line"><span class="keyword">from</span> slither.core.declarations.function <span class="keyword">import</span> Function</span><br><span class="line"><span class="keyword">from</span> slither.detectors.callGraph_cfg_Reentrancy.DM <span class="keyword">import</span> DM</span><br><span class="line"><span class="keyword">from</span> slither.detectors.callGraph_cfg_Reentrancy.DM <span class="keyword">import</span> allPaths_intToNode</span><br><span class="line"><span class="keyword">from</span> slither.detectors.callGraph_cfg_Reentrancy.Graph <span class="keyword">import</span> MyGraph</span><br><span class="line"><span class="keyword">from</span> slither.detectors.callGraph_cfg_Reentrancy.getAallPaths <span class="keyword">import</span> (getIcfgAllPath, getCfgAllPath)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> slither.detectors.ICFG_Reentrancy.icfg.ICFG <span class="keyword">import</span> ICFG</span><br><span class="line"><span class="keyword">from</span> slither.detectors.ICFG_Reentrancy.smallUtils <span class="keyword">import</span> (getadjMatrix, getICFGadjMatrix)</span><br><span class="line"><span class="keyword">from</span> slither.detectors.ICFG_Reentrancy.testDFS <span class="keyword">import</span> MyDeepGraph</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callerVisibilityHavePublic</span>(<span class="params">function, callGraph</span>):</span></span><br><span class="line">    functionNode = callGraph.function_Map_node.get(function)</span><br><span class="line">    <span class="comment"># if function.full_name == &quot;releaseTokensTo(address)&quot; and function.contract.name == &quot;Reservation&quot;:</span></span><br><span class="line">    <span class="comment">#     print(&quot;马明亮&quot;)``</span></span><br><span class="line">    <span class="comment">#     print(functionNode)</span></span><br><span class="line">    <span class="comment">#     print(functionNode.fathers)</span></span><br><span class="line">    <span class="keyword">for</span> father <span class="keyword">in</span> functionNode.fathers:</span><br><span class="line">        <span class="keyword">if</span> father.function.visibility == <span class="string">&#x27;public&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> callerVisibilityHavePublic(father.function, callGraph):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Allnodes</span>(<span class="params">slither</span>):</span></span><br><span class="line">    allnodes = []</span><br><span class="line">    <span class="keyword">for</span> function <span class="keyword">in</span> slither.functions:</span><br><span class="line">        allnodes.extend(function.nodes)</span><br><span class="line">    <span class="keyword">return</span> allnodes</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICfgReentrancy</span>(<span class="params">AbstractDetector</span>):</span></span><br><span class="line">    ARGUMENT = <span class="string">&#x27;ICfgReentrancy&#x27;</span></span><br><span class="line">    HELP = <span class="string">&#x27;Benign reentrancy vulnerabilities&#x27;</span></span><br><span class="line">    IMPACT = DetectorClassification.LOW</span><br><span class="line">    CONFIDENCE = DetectorClassification.MEDIUM</span><br><span class="line"></span><br><span class="line">    WIKI = <span class="string">&#x27;https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2&#x27;</span></span><br><span class="line"></span><br><span class="line">    WIKI_TITLE = <span class="string">&#x27;Reentrancy vulnerabilities&#x27;</span></span><br><span class="line">    WIKI_DESCRIPTION = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Detection of the [re-entrancy bug](https://github.com/trailofbits/not-so-smart-contracts/tree/master/reentrancy).</span></span><br><span class="line"><span class="string">    Only report reentrancy that acts as a double call (see `reentrancy-eth`, `reentrancy-no-eth`).&#x27;&#x27;&#x27;</span></span><br><span class="line">    WIKI_EXPLOIT_SCENARIO = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    ```solidity</span></span><br><span class="line"><span class="string">        function callme()&#123;</span></span><br><span class="line"><span class="string">            if( ! (msg.sender.call()() ) )&#123;</span></span><br><span class="line"><span class="string">                throw;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            counter += 1</span></span><br><span class="line"><span class="string">        &#125;   </span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    `callme` contains a reentrancy. The reentrancy is benign because it&#x27;s exploitation would have the same effect as two consecutive calls.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    WIKI_RECOMMENDATION = <span class="string">&#x27;Apply the [check-effects-interactions pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy).&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_detect</span>(<span class="params">self</span>):</span></span><br><span class="line">        icfg = ICFG(self.slither)</span><br><span class="line">        icfg.build_ICFG()</span><br><span class="line">        ethNodeList, taintNodeList, cfgEndNodeList = self.getAllEthNode_AllTaintNode()</span><br><span class="line">        callGraph = CallGraph(self.slither)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self.contracts:</span><br><span class="line">            self.detect_reentrancy(c, ethNodeList, taintNodeList, icfg, callGraph, cfgEndNodeList)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detect_reentrancy</span>(<span class="params">self, contract, ethNodeList, taintNodeList, icfg, callGraph, cfgEndNodeList</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Start Contract &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(contract.name))</span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> contract.functions:</span><br><span class="line">            <span class="keyword">if</span> function.is_implemented:</span><br><span class="line">                print(<span class="string">&#x27;\tTo analyze: &#123;&#125;.&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(function.contract.name, function.full_name))</span><br><span class="line">                dm = DM(function)   <span class="comment"># 声明dm防御对象</span></span><br><span class="line">                reentrancyFlag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                functon_taintNodeList = []  <span class="comment"># 存储本函数体内的taint</span></span><br><span class="line">                <span class="keyword">for</span> node <span class="keyword">in</span> function.nodes:</span><br><span class="line">                    <span class="keyword">if</span> node <span class="keyword">in</span> taintNodeList:</span><br><span class="line">                        functon_taintNodeList.append(node)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> function_taintNode <span class="keyword">in</span> functon_taintNodeList:</span><br><span class="line">                    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    startToend = [start, ... ,end]</span></span><br><span class="line"><span class="string">                    &#x27;&#x27;&#x27;</span></span><br><span class="line">                    cfgEntryNodeTotaint = []</span><br><span class="line">                    cfgEntryNodeTotaint.append(function.entry_point)</span><br><span class="line">                    cfgEntryNodeTotaint.extend(<span class="built_in">list</span>(<span class="built_in">set</span>(function.nodes) - <span class="built_in">set</span>([function.entry_point, function_taintNode])))</span><br><span class="line">                    cfgEntryNodeTotaint.append(function_taintNode)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># cfgAllPath = getCfgAllPath(cfgEntryNodeTotaint)</span></span><br><span class="line">                    adjMatrix = getadjMatrix(cfgEntryNodeTotaint)</span><br><span class="line">                    mydeepGraph = MyDeepGraph(<span class="built_in">len</span>(cfgEntryNodeTotaint))</span><br><span class="line">                    mydeepGraph.setadjMetrix(adjMatrix)</span><br><span class="line">                    cfgAllPath = mydeepGraph.getPathofTwoNode(<span class="number">0</span>, <span class="built_in">len</span>(cfgEntryNodeTotaint)-<span class="number">1</span>)</span><br><span class="line">                    cfgAllPath_Node = allPaths_intToNode(cfgAllPath, cfgEntryNodeTotaint)</span><br><span class="line"></span><br><span class="line">                    cfgCandidateAllPath_Node = []</span><br><span class="line">                    <span class="keyword">for</span> path <span class="keyword">in</span> cfgAllPath_Node[:]:</span><br><span class="line">                       <span class="keyword">if</span> <span class="built_in">any</span>(iNode <span class="keyword">in</span> ethNodeList <span class="keyword">for</span> iNode <span class="keyword">in</span> path):</span><br><span class="line">                           cfgCandidateAllPath_Node.append(path)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> cfgCandidateAllPath_Node:   <span class="comment"># 证明cfg本身就找到Reentrancy了，准备humanlook, 注意reversed, DM</span></span><br><span class="line"></span><br><span class="line">                        human_cfgCandidateAllPath_Node = []</span><br><span class="line">                        <span class="keyword">for</span> path <span class="keyword">in</span> cfgCandidateAllPath_Node:</span><br><span class="line">                            tempPath = []</span><br><span class="line">                            <span class="keyword">for</span> everyNode <span class="keyword">in</span> path:</span><br><span class="line">                                <span class="keyword">if</span> everyNode.<span class="built_in">type</span> == NodeType.ENTRYPOINT:</span><br><span class="line">                                    everyNode.add_expression(<span class="string">&#x27;entryPoint&#x27;</span>)</span><br><span class="line">                                tempPath.append(<span class="built_in">str</span>(everyNode.expression))</span><br><span class="line">                            human_cfgCandidateAllPath_Node.append(tempPath)</span><br><span class="line">                        advanceUpdateFlag = <span class="literal">False</span>  <span class="comment"># dm.advancedUpdateEth(function)</span></span><br><span class="line">                        privateVisibility = dm.privateVisibility(function)</span><br><span class="line">                        havePublicCaller = callerVisibilityHavePublic(function, callGraph)</span><br><span class="line">                        <span class="keyword">if</span> privateVisibility <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                            <span class="keyword">if</span> havePublicCaller <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                                reentrancyFlag = <span class="literal">True</span></span><br><span class="line">                                print(<span class="string">&#x27;\t\tcontract: &#123;&#125; | function: &#123;&#125; | private: &#123;&#125; | publicCaller: &#123;&#125; | Execution Locks and Eth money balance modification: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                                    function.contract.name, function.full_name, privateVisibility, havePublicCaller, advanceUpdateFlag))</span><br><span class="line">                                <span class="keyword">for</span> human_cfgCandidatePath_Node <span class="keyword">in</span> human_cfgCandidateAllPath_Node:</span><br><span class="line">                                    print(<span class="string">&#x27;\t\t\tpath: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(human_cfgCandidatePath_Node))</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            reentrancyFlag = <span class="literal">True</span></span><br><span class="line">                            print(</span><br><span class="line">                                <span class="string">&#x27;\t\tcontract: &#123;&#125; | function: &#123;&#125; | private: &#123;&#125; | Execution Locks and Eth money balance modification: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                                    function.contract.name, function.full_name, privateVisibility, advanceUpdateFlag))</span><br><span class="line">                            <span class="keyword">for</span> human_cfgCandidatePath_Node <span class="keyword">in</span> human_cfgCandidateAllPath_Node:</span><br><span class="line">                                print(<span class="string">&#x27;\t\t\tpath: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(human_cfgCandidatePath_Node))</span><br><span class="line">                <span class="keyword">if</span> reentrancyFlag <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                    print(<span class="string">&#x27;[cfg_Reentrancy in] contract: &#123;&#125; . function: &#123;&#125; | &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(function.contract.name, function.full_name, function.source_mapping_str))</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> reentrancyFlag <span class="keyword">is</span> <span class="literal">False</span>:  <span class="comment"># 证明cfg本身没找到Reentrancy</span></span><br><span class="line">                    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    bug修复为了把当前的function的endnode的回调用处的那条路径删除，同时也要删除本函数entryNode的icfgFather</span></span><br><span class="line"><span class="string">                    &#x27;&#x27;&#x27;</span></span><br><span class="line">                    print(<span class="string">&#x27;\t\tCFG analysis is safe, so start analyzing XCFG&#x27;</span>.<span class="built_in">format</span>(function.full_name))</span><br><span class="line">                    <span class="comment"># = function.entry_point.icfgFathers</span></span><br><span class="line">                    <span class="comment"># function.entry_point.set_icfgFather([])</span></span><br><span class="line">                    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    endnodeMapBackSons = &#123;&#125;</span></span><br><span class="line"><span class="string">                    # hh = [str(endnode.expression) for endnode in function.ENDnodes]</span></span><br><span class="line"><span class="string">                    # print(&#x27;结束点：&#x27;.format(hh))</span></span><br><span class="line"><span class="string">                    for endnode in function.ENDnodes:</span></span><br><span class="line"><span class="string">                        endnodeMapBackSons[endnode] = []</span></span><br><span class="line"><span class="string">                        for son in endnode.backIcfgSons:</span></span><br><span class="line"><span class="string">                            endnodeMapBackSons[endnode].append(son)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    for endnode in function.ENDnodes:</span></span><br><span class="line"><span class="string">                        endnode.set_backIcfgSons([])</span></span><br><span class="line"><span class="string">                    &#x27;&#x27;&#x27;</span></span><br><span class="line">                    <span class="comment"># tt = [str(taintNode.expression) for taintNode in taintNodeList]</span></span><br><span class="line">                    <span class="comment"># print(&#x27;系统中所有的taint：&#123;&#125;, 总共有 &#123;&#125; 个taintNode&#x27;.format(tt, len(taintNodeList)))</span></span><br><span class="line">                    <span class="comment"># for endnode in function.ENDnodes:</span></span><br><span class="line">                    <span class="comment">#     print(&#x27;回到哪里了: &#123;&#125;&#x27;.format(endnodeMapBackSons[endnode]))</span></span><br><span class="line">                    <span class="comment"># for endnode in function.ENDnodes:</span></span><br><span class="line">                    <span class="comment">#     print(&#x27;注意应该是0：&#123;&#125;&#x27;.format(len(endnode.backIcfgSons)))</span></span><br><span class="line">                    <span class="keyword">for</span> taintNode <span class="keyword">in</span> taintNodeList:</span><br><span class="line">                        icfgEntryNodeTotaint = []</span><br><span class="line">                        icfgEntryNodeTotaint.append(function.entry_point)</span><br><span class="line">                        icfgEntryNodeTotaint.extend(<span class="built_in">list</span>(<span class="built_in">set</span>(icfg.allNodes) - <span class="built_in">set</span>([function.entry_point, taintNode])))</span><br><span class="line">                        icfgEntryNodeTotaint.append(taintNode)</span><br><span class="line"></span><br><span class="line">                        adjMatrix = getICFGadjMatrix(icfgEntryNodeTotaint)</span><br><span class="line"></span><br><span class="line">                        mydeepGraph = MyDeepGraph(<span class="built_in">len</span>(icfgEntryNodeTotaint))</span><br><span class="line">                        mydeepGraph.setadjMetrix(adjMatrix)</span><br><span class="line">                        <span class="comment">#mydeepGraph.printMatrix()</span></span><br><span class="line">                        icfgAllPath = mydeepGraph.getPathofTwoNode(<span class="number">0</span>, <span class="built_in">len</span>(icfgEntryNodeTotaint) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                        icfgAllPath_Node = allPaths_intToNode(icfgAllPath, icfgEntryNodeTotaint)</span><br><span class="line"></span><br><span class="line">                        <span class="comment">#icfgAllPath = getIcfgAllPath(icfgEntryNodeTotaint)</span></span><br><span class="line">                        <span class="comment"># print(&#x27;函数&#123;&#125;的入口点到taint点&#123;&#125;的路径有&#123;&#125;条：&#x27;.format(function.full_name, taintNode.expression, len(icfgAllPath)))</span></span><br><span class="line">                        <span class="comment">#icfgAllPath_Node = allPaths_intToNode(icfgAllPath, icfgEntryNodeTotaint)</span></span><br><span class="line">                        <span class="comment"># print(&#x27;应该为1：&#123;&#125;&#x27;.format(len(icfgAllPath_Node)))</span></span><br><span class="line">                        <span class="comment"># qq = [[str(ww.expression) for ww in yy] for yy in icfgAllPath_Node]</span></span><br><span class="line">                        <span class="comment"># print(&#x27;路径：&#123;&#125;&#x27;.format(qq))</span></span><br><span class="line">                        icfgCandidateAllPath_Node = []</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> path <span class="keyword">in</span> icfgAllPath_Node:</span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">any</span>(iNode <span class="keyword">in</span> ethNodeList <span class="keyword">for</span> iNode <span class="keyword">in</span> path):</span><br><span class="line">                                icfgCandidateAllPath_Node.append(path)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># if icfgCandidateAllPaht_Node:</span></span><br><span class="line">                        <span class="comment">#     # 检查icfg路径合法性</span></span><br><span class="line">                        <span class="comment">#     cfgEndNodeList_exp = list(set(cfgEndNodeList) - set(function.ENDnodes))</span></span><br><span class="line">                        <span class="comment">#     for path in icfgCandidateAllPaht_Node:</span></span><br><span class="line">                        <span class="comment">#         new = path[-1]</span></span><br><span class="line">                        <span class="comment">#         for node in path:</span></span><br><span class="line">                        <span class="comment">#             if node in cfgEndNodeList_exp:</span></span><br><span class="line">                        <span class="comment">#                 for entryP in node.icfgSons:</span></span><br><span class="line">                        <span class="comment">#                     for preEndNode in entryP.function.ENDnodes:</span></span><br><span class="line">                        <span class="comment">#                         if preEndNode in path:</span></span><br><span class="line">                        <span class="comment">#                             if (path.index(preEndNode) + 1) &lt;= len(path)-1:</span></span><br><span class="line">                        <span class="comment">#                                 possibleErrNodeIndex = path.index(preEndNode) + 1</span></span><br><span class="line">                        <span class="comment">#                                 possibleErrNode = path[possibleErrNodeIndex]</span></span><br><span class="line">                        <span class="comment">#                                 if possibleErrNode != node:</span></span><br><span class="line">                        <span class="comment">#                                     # path.append(&#x27;非法路径&#x27;)</span></span><br><span class="line">                        <span class="comment">#                                     pass</span></span><br><span class="line">                        <span class="comment">#</span></span><br><span class="line">                        <span class="comment">#</span></span><br><span class="line">                        <span class="comment">#             if node in function.ENDnodes:</span></span><br><span class="line">                        <span class="comment">#                 if path[-1] != node:</span></span><br><span class="line">                        <span class="comment">#                     # 非法路径</span></span><br><span class="line">                        <span class="comment">#                     pass</span></span><br><span class="line">                        <span class="keyword">if</span> icfgCandidateAllPath_Node:    <span class="comment"># 证明icfg本身找到Reentrancy了，准备humanlook, DM</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment"># print(&#x27;证明icfg本身找到Reentrancy了，准备humanlook, DM&#x27;)</span></span><br><span class="line">                            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                            转变成普通人能看懂的形式，注意reversed</span></span><br><span class="line"><span class="string">                            &#x27;&#x27;&#x27;</span></span><br><span class="line">                            human_icfgCandidateAllPath_Node = []</span><br><span class="line">                            <span class="keyword">for</span> path <span class="keyword">in</span> icfgCandidateAllPath_Node:</span><br><span class="line">                                tempPath = []</span><br><span class="line">                                <span class="keyword">for</span> everyNode <span class="keyword">in</span> path:</span><br><span class="line">                                    <span class="keyword">if</span> everyNode.<span class="built_in">type</span> == NodeType.ENTRYPOINT:</span><br><span class="line">                                        everyNode.add_expression(<span class="string">&#x27;entryPoint&#x27;</span>)</span><br><span class="line">                                    tempPath.append(<span class="built_in">str</span>(everyNode.expression))</span><br><span class="line">                                human_icfgCandidateAllPath_Node.append(tempPath)</span><br><span class="line">                            etherNodesInPath = []</span><br><span class="line">                            <span class="comment"># for path in icfgCandidateAllPaht_Node:</span></span><br><span class="line">                            <span class="comment">#     for itemNode in path:</span></span><br><span class="line">                            <span class="comment">#         if itemNode in ethNodeList:</span></span><br><span class="line">                            <span class="comment">#             etherNodesInPath.append(itemNode)</span></span><br><span class="line">                            etherNodesInPath = [itemNode <span class="keyword">for</span> path <span class="keyword">in</span> icfgCandidateAllPath_Node <span class="keyword">for</span> itemNode <span class="keyword">in</span> path <span class="keyword">if</span> itemNode <span class="keyword">in</span> ethNodeList]</span><br><span class="line">                            <span class="comment"># print(&#x27;长度：&#123;&#125;&#x27;.format(len(etherNodesInPath)))</span></span><br><span class="line">                            <span class="comment"># kkk = [str(etherNodeInPath.expression) for etherNodeInPath in etherNodesInPath]</span></span><br><span class="line">                            <span class="comment"># print(&#x27;在路径中的转账节点：&#123;&#125;&#x27;.format(kkk))</span></span><br><span class="line">                            realETHfunctionList = [eNode.function <span class="keyword">for</span> eNode <span class="keyword">in</span> etherNodesInPath]</span><br><span class="line">                            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                            if all(dm.advancedUpdateEth(function) for function in realETHfunctionList):</span></span><br><span class="line"><span class="string">                                advanceUpdateFlag = True</span></span><br><span class="line"><span class="string">                            else:</span></span><br><span class="line"><span class="string">                                advanceUpdateFlag = False</span></span><br><span class="line"><span class="string">                            &#x27;&#x27;&#x27;</span></span><br><span class="line">                            advanceUpdateFlag = <span class="literal">False</span></span><br><span class="line">                            <span class="comment">#advanceUpdateFlag = dm.advancedUpdateEth(function)</span></span><br><span class="line">                            privateVisibility = dm.privateVisibility(function)</span><br><span class="line">                            havePublicCaller = callerVisibilityHavePublic(function, callGraph)</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> privateVisibility <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                                <span class="keyword">if</span> havePublicCaller <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                                    reentrancyFlag = <span class="literal">True</span></span><br><span class="line">                                    print(</span><br><span class="line">                                        <span class="string">&#x27;\t\tcontract: &#123;&#125; | function: &#123;&#125; | private: &#123;&#125; | publicCaller: &#123;&#125; | Execution Locks and Eth money balance modification: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                                            function.contract.name, function.full_name, privateVisibility, havePublicCaller, advanceUpdateFlag))</span><br><span class="line">                                    <span class="keyword">for</span> human_icfgCandidatePath_Node <span class="keyword">in</span> human_icfgCandidateAllPath_Node:</span><br><span class="line">                                        print(<span class="string">&#x27;\t\t\tpath: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(human_icfgCandidatePath_Node))</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                reentrancyFlag = <span class="literal">True</span></span><br><span class="line">                                print(</span><br><span class="line">                                    <span class="string">&#x27;\t\tcontract: &#123;&#125; | function: &#123;&#125; | private: &#123;&#125; | Execution Locks and Eth money balance modification: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                                        function.contract.name, function.full_name, privateVisibility, advanceUpdateFlag))</span><br><span class="line">                                <span class="keyword">for</span> human_icfgCandidatePath_Node <span class="keyword">in</span> human_icfgCandidateAllPath_Node:</span><br><span class="line">                                    print(<span class="string">&#x27;\t\t\tpath: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(human_icfgCandidatePath_Node))</span><br><span class="line">                    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    为了把当前的function的endnode的回调用处的那条路径再补上, 和entryNode的icfgFather叶去掉</span></span><br><span class="line"><span class="string">                    &#x27;&#x27;&#x27;</span></span><br><span class="line">                    <span class="comment"># if endnodeMapBackSons:</span></span><br><span class="line">                    <span class="comment">#     for endnode in function.ENDnodes:</span></span><br><span class="line">                    <span class="comment">#         endnode.set_backIcfgSons = endnodeMapBackSons[endnode]</span></span><br><span class="line">                    <span class="comment">#function.entry_point.set_icfgFather = icfgFathersNeedToDuan</span></span><br><span class="line">                <span class="keyword">if</span> reentrancyFlag <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                    print(<span class="string">&#x27;[icfg_Reentrancy in] contract: &#123;&#125; . function: &#123;&#125; | &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(function.contract.name, function.name, function.source_mapping_str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAllEthNode_AllTaintNode</span>(<span class="params">self</span>):</span></span><br><span class="line">        ethNodeList = []</span><br><span class="line">        taintNodeList = []</span><br><span class="line">        cfgEndNodeList = []</span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> self.slither.functions:</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> function.nodes:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(node.sons) == <span class="number">0</span>:</span><br><span class="line">                    node.isEND = <span class="literal">True</span></span><br><span class="line">                    function.ENDnodes.append(node)</span><br><span class="line">                    cfgEndNodeList.append(node)</span><br><span class="line">                <span class="keyword">if</span> self._can_send_eth(node.irs):</span><br><span class="line">                    ethNodeList.append(node)</span><br><span class="line">                    function.ethNodes.append(node)</span><br><span class="line">                <span class="keyword">if</span> self._node_taint(node):</span><br><span class="line">                    taintNodeList.append(node)</span><br><span class="line">        <span class="keyword">return</span> ethNodeList, taintNodeList, cfgEndNodeList</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_can_send_eth</span>(<span class="params">self, irs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Detect if the node can send eth</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> ir <span class="keyword">in</span> irs:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(ir, (HighLevelCall, LowLevelCall, Transfer, Send)):</span><br><span class="line">                <span class="keyword">if</span> ir.call_value:</span><br><span class="line">                    <span class="comment"># print(type(ir.call_value))  # &lt;class &#x27;slither.slithir.variables.constant.Constant&#x27;&gt;</span></span><br><span class="line">                    <span class="comment"># print(str(ir.call_value))</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(ir.call_value, Constant) <span class="keyword">and</span> <span class="built_in">str</span>(ir.call_value) == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_node_taint</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">if</span> node.high_level_calls <span class="keyword">or</span> node.low_level_calls:</span><br><span class="line">            <span class="keyword">for</span> ir <span class="keyword">in</span> node.irs:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">hasattr</span>(ir, <span class="string">&#x27;destination&#x27;</span>):</span><br><span class="line">                    taintflag = is_tainted(ir.destination, node.function.contract)</span><br><span class="line">                    <span class="keyword">if</span> taintflag <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="smallUtils-py"><a href="#smallUtils-py" class="headerlink" title="smallUtils.py"></a>smallUtils.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> slither.core.variables.variable <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> slither.core.declarations.function <span class="keyword">import</span> Function</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_CFGnode_Calls</span>(<span class="params">node</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param node: cfg中的call节点</span></span><br><span class="line"><span class="string">    :return: callee</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    internalCalls = node.internal_calls</span><br><span class="line">    externalCalls = []</span><br><span class="line">    <span class="keyword">for</span> external_call <span class="keyword">in</span> node.high_level_calls:</span><br><span class="line">        external_contract, external_function = external_call</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(external_function, (Function)):</span><br><span class="line">            externalCalls.append(external_function)</span><br><span class="line">    <span class="keyword">return</span> internalCalls + externalCalls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCFG_endNodes</span>(<span class="params">function</span>):</span></span><br><span class="line">    cfgEndNodes = []</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> function.nodes:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(node.sons) == <span class="number">0</span>:</span><br><span class="line">            cfgEndNodes.append(node)</span><br><span class="line">    <span class="keyword">return</span> cfgEndNodes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link_nodes</span>(<span class="params">n1, n2</span>):</span></span><br><span class="line">    n1.add_son(n2)</span><br><span class="line">    n2.add_father(n1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link_icfgNodes</span>(<span class="params">n1, n2</span>):</span></span><br><span class="line">    n1.add_icfgSon(n2)</span><br><span class="line">    n2.add_icfgFather(n1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link_backIcfgNodes</span>(<span class="params">n1, n2</span>):</span></span><br><span class="line">    n1.add_backIcfgSon(n2)</span><br><span class="line">    n2.add_backIcfgFather(n1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getadjMatrix</span>(<span class="params">startToEndVertexList</span>):</span></span><br><span class="line">    vertexNum = <span class="built_in">len</span>(startToEndVertexList)</span><br><span class="line">    adjMatrix = [[<span class="number">0</span>] * vertexNum <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(vertexNum)]</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> startToEndVertexList:</span><br><span class="line">        <span class="keyword">for</span> son <span class="keyword">in</span> node.sons:</span><br><span class="line">            adjMatrix[startToEndVertexList.index(node)][startToEndVertexList.index(son)] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> adjMatrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getICFGadjMatrix</span>(<span class="params">startToEndVertexList</span>):</span></span><br><span class="line">    vertexNum = <span class="built_in">len</span>(startToEndVertexList)</span><br><span class="line">    adjMatrix = [[<span class="number">0</span>] * vertexNum <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(vertexNum)]</span><br><span class="line">    count = <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> startToEndVertexList:</span><br><span class="line">        <span class="keyword">for</span> son <span class="keyword">in</span> node.sons:</span><br><span class="line">            adjMatrix[startToEndVertexList.index(node)][startToEndVertexList.index(son)] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> son <span class="keyword">in</span> node.icfgSons:</span><br><span class="line">            adjMatrix[startToEndVertexList.index(node)][startToEndVertexList.index(son)] = count</span><br><span class="line">            adjMatrix[startToEndVertexList.index(son)][startToEndVertexList.index(node)] = count-<span class="number">1</span></span><br><span class="line">            count += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> adjMatrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">defenseModifier</span>():</span></span><br><span class="line">    defenseModifierList = [<span class="string">&#x27;onlyOwner&#x27;</span>, <span class="string">&#x27;ownerOnly&#x27;</span>, <span class="string">&#x27;isAnOwner&#x27;</span>, <span class="string">&#x27;onlyPartner&#x27;</span>, <span class="string">&#x27;noFromContract&#x27;</span>, <span class="string">&#x27;nonReentrant&#x27;</span>, <span class="string">&#x27;noReentrancy&#x27;</span>, <span class="string">&#x27;isYHT&#x27;</span>, <span class="string">&#x27;onlyHuman&#x27;</span>, <span class="string">&#x27;onlyAdmin&#x27;</span>, <span class="string">&#x27;onlyPlayer&#x27;</span>, <span class="string">&#x27;isWhitelisted&#x27;</span>, <span class="string">&#x27;notContract&#x27;</span>, <span class="string">&#x27;isHuman&#x27;</span>, <span class="string">&#x27;noFromContract&#x27;</span>, <span class="string">&#x27;onlyOwnerOrPartner&#x27;</span>, <span class="string">&#x27;reentrancy&#x27;</span>, <span class="string">&#x27;onlyManager&#x27;</span>, <span class="string">&#x27;onlywhitelisted&#x27;</span>, <span class="string">&#x27;onlyAdministrator&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> defenseModifierList</span><br></pre></td></tr></table></figure>

<h2 id="testDFS-py"><a href="#testDFS-py" class="headerlink" title="testDFS.py"></a>testDFS.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDeepGraph</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, vertexNum</span>):</span></span><br><span class="line">        self.vertexNum = vertexNum</span><br><span class="line">        self.adjMetrix = [[<span class="number">0</span>] * vertexNum <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(vertexNum)]</span><br><span class="line">        self.visitedFlag = [<span class="literal">False</span>] * vertexNum</span><br><span class="line">        self.pathStack = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printMatrix</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> everyRow <span class="keyword">in</span> self.adjMetrix:</span><br><span class="line">            print(everyRow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setadjMetrix</span>(<span class="params">self, real_adjMetrix</span>):</span></span><br><span class="line">        self.adjMetrix = real_adjMetrix</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatrixValue</span>(<span class="params">self, row, column</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.adjMetrix[row][column]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPathofTwoNode</span>(<span class="params">self, start, end</span>):</span></span><br><span class="line">        paths = []</span><br><span class="line">        self.visitedFlag[start] = <span class="literal">True</span></span><br><span class="line">        self.pathStack.append(start)</span><br><span class="line">        self.findPath(start, end, paths)</span><br><span class="line">        <span class="keyword">return</span> paths</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findPath</span>(<span class="params">self, start, end, paths</span>):</span></span><br><span class="line">        <span class="keyword">if</span> start == end:</span><br><span class="line">            temp = <span class="built_in">list</span>(self.pathStack)</span><br><span class="line">            paths.append(temp)</span><br><span class="line">            self.visitedFlag[self.pathStack[-<span class="number">1</span>]] = <span class="literal">False</span></span><br><span class="line">            self.pathStack.pop()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            unStackedNum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.vertexNum):</span><br><span class="line">                <span class="keyword">if</span> self.adjMetrix[start][i] <span class="keyword">and</span> self.visitedFlag[i] <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">                    <span class="comment"># if self.adjMetrix[start][i] &gt; 1:    # 如果这条边是icfg入边，把dummyEnter入栈</span></span><br><span class="line">                    <span class="comment">#     self.recordStack.extend(self.historyStack)</span></span><br><span class="line">                    <span class="comment">#     self.recordStack.append([start, self.adjMetrix[start].index(1)])</span></span><br><span class="line">                    <span class="comment"># # print(&#x27;战神：&#123;&#125;&#x27;.format(len(self.recordStack)))</span></span><br><span class="line">                    unStackedNum += <span class="number">1</span></span><br><span class="line">                    self.visitedFlag[i] = <span class="literal">True</span></span><br><span class="line">                    self.pathStack.append(i)</span><br><span class="line">                    self.findPath(i, end, paths)</span><br><span class="line">                <span class="comment"># if self.adjMetrix[start][i] % 2 == 0 and self.adjMetrix[start][i] != 0:   # 如果这条边是icfg 返回边， self.pathStack.append(栈顶)</span></span><br><span class="line">                <span class="comment">#     if self.recordStack:</span></span><br><span class="line">                <span class="comment">#         self.pathStack.append(self.recordStack[-1][1])</span></span><br><span class="line">                <span class="comment">#         temp = self.recordStack.pop()</span></span><br><span class="line">                <span class="comment">#         self.historyStack.append(temp)</span></span><br><span class="line">                <span class="comment">#         self.findPath(temp[1], end, paths)</span></span><br><span class="line">            self.visitedFlag[self.pathStack[-<span class="number">1</span>]] = <span class="literal">False</span></span><br><span class="line">            self.pathStack.pop()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def test():</span></span><br><span class="line"><span class="comment">#     graph = MyDeepGraph(5)</span></span><br><span class="line"><span class="comment">#     adjMetrix = [[0]*5 for i in range(5)]</span></span><br><span class="line"><span class="comment">#     adjMetrix[0][1] = 1</span></span><br><span class="line"><span class="comment">#     adjMetrix[1][2] = 1</span></span><br><span class="line"><span class="comment">#     adjMetrix[2][3] = 1</span></span><br><span class="line"><span class="comment">#     adjMetrix[3][4] = 1</span></span><br><span class="line"><span class="comment">#     #adjMetrix[2][4] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[0][1] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[1][5] = 3</span></span><br><span class="line"><span class="comment">#     # adjMetrix[1][2] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[2][3] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[3][4] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[5][6] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[6][7] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[7][8] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[8][2] = 2</span></span><br><span class="line"><span class="comment">#     # adjMetrix[9][5] = 5</span></span><br><span class="line"><span class="comment">#     # adjMetrix[9][10] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[10][11] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[8][10] = 4</span></span><br><span class="line"><span class="comment">#     # adjMetrix[1][12] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[2][12] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[6][13] = 7</span></span><br><span class="line"><span class="comment">#     # adjMetrix[13][14] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[14][17] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[17][7] = 6</span></span><br><span class="line"><span class="comment">#     # adjMetrix[13][15] = 9</span></span><br><span class="line"><span class="comment">#     # adjMetrix[15][18] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[18][16] = 1</span></span><br><span class="line"><span class="comment">#     # adjMetrix[16][14] = 8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     graph.setadjMetrix(adjMetrix)</span></span><br><span class="line"><span class="comment">#     graph.printMatrix()</span></span><br><span class="line"><span class="comment">#     paths = graph.getPathofTwoNode(0, 4)</span></span><br><span class="line"><span class="comment">#     print(paths)</span></span><br><span class="line"><span class="comment"># test()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def temp():</span></span><br><span class="line"><span class="comment">#     c = &#x27;aaa&#x27;</span></span><br><span class="line"><span class="comment">#     a = [1]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     print(isinstance(c, list))</span></span><br><span class="line"><span class="comment"># temp()</span></span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"><span class="comment">## ICFG.py</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> slither.core.declarations.solidity_variables <span class="keyword">import</span> SolidityFunction</span><br><span class="line"><span class="keyword">from</span> slither.core.declarations.function <span class="keyword">import</span> Function</span><br><span class="line"><span class="keyword">from</span> slither.core.callGraph.functionNode <span class="keyword">import</span> FunctionNode</span><br><span class="line"><span class="keyword">from</span> slither.core.variables.variable <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> slither.analyses.data_dependency.data_dependency <span class="keyword">import</span> is_tainted</span><br><span class="line"><span class="keyword">from</span> slither.detectors.callGraph_cfg_Reentrancy.Graph <span class="keyword">import</span> MyGraph</span><br><span class="line"><span class="keyword">from</span> slither.detectors.ICFG_Reentrancy.smallUtils <span class="keyword">import</span> (get_CFGnode_Calls, getCFG_endNodes, link_nodes, link_icfgNodes, link_backIcfgNodes)</span><br><span class="line"><span class="keyword">from</span> slither.core.cfg.node <span class="keyword">import</span> (Node, NodeType)</span><br><span class="line"><span class="keyword">from</span> slither.solc_parsing.cfg.node <span class="keyword">import</span> NodeSolc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICFG</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, slither</span>):</span></span><br><span class="line">        self._slither = slither</span><br><span class="line">        self.allNodes = []</span><br><span class="line">        self.visitedList = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_ICFG</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">id</span> = <span class="number">100</span></span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> self._slither.functions:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> function.is_implemented:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> function <span class="keyword">in</span> self.visitedList:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            self.visitedList.append(function)</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> function.nodes:</span><br><span class="line">                callees = get_CFGnode_Calls(node)</span><br><span class="line">                <span class="keyword">if</span> callees:</span><br><span class="line">                    dummInode = NodeSolc(NodeType.DUMMY, <span class="built_in">id</span>)</span><br><span class="line">                    function.addNode(dummInode)</span><br><span class="line">                    dummInode.set_function(function)</span><br><span class="line">                    dummInode.set_sons(node.sons)</span><br><span class="line">                    node.set_sons([])</span><br><span class="line">                    link_nodes(node, dummInode)</span><br><span class="line">                    <span class="built_in">id</span> = <span class="built_in">id</span> + <span class="number">1</span></span><br><span class="line">                <span class="comment"># if any(callee.is_implemented for callee in callees):</span></span><br><span class="line">                <span class="comment">#     link_nodes(node, Node(NodeType.DUMMY, id))</span></span><br><span class="line">                <span class="comment">#     id -= 1</span></span><br><span class="line">                <span class="comment">#     dummyInode = Node(NodeType.DUMMY, id)</span></span><br><span class="line">                <span class="comment">#     dummyInode.set_sons(node.sons)</span></span><br><span class="line">                <span class="comment">#     node.set_sons([])</span></span><br><span class="line">                <span class="comment">#     link_icfgNodes(node, dummyInode)</span></span><br><span class="line">                <span class="comment">#     link_nodes(node, dummyInode)</span></span><br><span class="line">                <span class="keyword">for</span> callee <span class="keyword">in</span> callees:</span><br><span class="line">                    <span class="comment">#print(&#x27;被调用函数的名字：&#123;&#125;&#x27;.format(callee.full_name))</span></span><br><span class="line">                    <span class="comment"># node.add_icfgSon(callee.entry_point)</span></span><br><span class="line">                    <span class="keyword">if</span> callee.entry_point <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="comment"># dummyInode = Node(NodeType.DUMMY, id)</span></span><br><span class="line">                    <span class="comment"># dummyInode.set_fathers(node.sons)</span></span><br><span class="line">                    <span class="comment"># node.set_sons([])</span></span><br><span class="line">                    <span class="comment"># link_nodes(node, dummyInode)</span></span><br><span class="line">                    <span class="comment"># id -= 1</span></span><br><span class="line">                    link_icfgNodes(node, callee.entry_point)</span><br><span class="line">                    callee_cfgEndNodes = getCFG_endNodes(callee)</span><br><span class="line">                    <span class="keyword">for</span> callee_cfgEndNode <span class="keyword">in</span> callee_cfgEndNodes:</span><br><span class="line">                        <span class="comment"># for cfgSon in node.sons:</span></span><br><span class="line">                        link_backIcfgNodes(callee_cfgEndNode, node.sons[<span class="number">0</span>])</span><br><span class="line">            self.allNodes.extend(function.nodes)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
